apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-airflow-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-airflow-scheduler
  template:
    metadata:
      labels:
        app: backend-airflow-scheduler
    spec:
      imagePullSecrets:
      {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      
      initContainers:
      # --- AÑADIDO: Init Container para arreglar los permisos del volumen ---
      - name: volume-permissions-fix
        image: busybox:latest
        command: ['sh', '-c', 'chmod -R 777 /data']
        volumeMounts:
          - name: airflow-data
            mountPath: /data
      # --- FIN DE LA SECCIÓN AÑADIDA ---
            
      # 2. Init Container para clonar el repo (versión robusta)
      - name: git-clone-data
        image: alpine/git:latest
        command:
          - sh
          - -c
          - |
            if [ ! -d /data/repo-datos/.git ]; then
              echo "Clonando repositorio de datos..."
              git clone --single-branch --depth 1 https://github.com/Ml-For-Academic-Data/egi-control.git /data/repo-datos
            else
              echo "El repositorio ya existe, omitiendo clonación."
            fi
        volumeMounts:
          - name: airflow-data
            mountPath: /data
            
      # 3. El Init Container de Airflow que ya existía
      - name: airflow-db-init
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["airflow", "db", "init"]
        env:
          - name: AIRFLOW__CORE__FERNET_KEY
            value: {{ .Values.airflow.fernetKey | quote }}
          - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
            value: {{ .Values.airflow.dbConnection | quote }}
        volumeMounts:
          - name: airflow-data
            mountPath: /opt/airflow/data

      containers:
        - name: scheduler
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["airflow", "scheduler"]
          env:
            - name: AIRFLOW__CORE__FERNET_KEY
              value: {{ .Values.airflow.fernetKey | quote }}
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: {{ .Values.airflow.dbConnection | quote }}
            - name: AIRFLOW__CORE__EXECUTOR
              value: "SequentialExecutor"
          volumeMounts:
            - name: airflow-data
              mountPath: /opt/airflow/data

      volumes:
        - name: airflow-data
          persistentVolumeClaim:
            claimName: efs-shared-pvc