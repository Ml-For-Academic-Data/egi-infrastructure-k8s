apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-airflow-webserver
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: backend-airflow-webserver
  template:
    metadata:
      labels:
        app: backend-airflow-webserver
    spec:
      imagePullSecrets:
      {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      
      initContainers:
      # 1. Init Container para clonar el repo 
      - name: git-clone-data
        image: alpine/git:latest
        command:
          - sh
          - -c
          - |
            if [ ! -d /data/repo-datos/.git ]; then
              echo "Clonando repositorio de datos..."
              git clone --single-branch --depth 1 https://github.com/Ml-For-Academic-Data/egi-control.git /data/repo-datos
            else
              echo "El repositorio ya existe, omitiendo clonación."
            fi
        volumeMounts:
          - name: airflow-data
            mountPath: /data
            
      # 2. El Init Container de Airflow que ya existía
      - name: airflow-db-init
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["airflow", "db", "init"]
        env:
          - name: AIRFLOW__CORE__FERNET_KEY
            value: {{ .Values.airflow.fernetKey | quote }}
          - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
            value: {{ .Values.airflow.dbConnection | quote }}
        volumeMounts:
          - name: airflow-data
            mountPath: /opt/airflow/data
      
      containers:
        - name: webserver
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["airflow", "webserver"]
          env:
            - name: AIRFLOW__CORE__FERNET_KEY
              value: {{ .Values.airflow.fernetKey | quote }}
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: {{ .Values.airflow.dbConnection | quote }}
            - name: AIRFLOW__CORE__EXECUTOR
              value: "SequentialExecutor"
            - name: AIRFLOW__WWW__USER_CREATE
              value: "true"
            - name: AIRFLOW__WWW__USER_USERNAME
              value: {{ .Values.airflowAdmin.username | quote }}
            - name: AIRFLOW__WWW__USER_EMAIL
              value: {{ .Values.airflowAdmin.email | quote }}
            - name: AIRFLOW__WWW__USER_FIRSTNAME
              value: {{ .Values.airflowAdmin.firstName | quote }}
            - name: AIRFLOW__WWW__USER_LASTNAME
              value: {{ .Values.airflowAdmin.lastName | quote }}
            - name: AIRFLOW__WWW__USER_ROLE
              value: "Admin"
            - name: AIRFLOW__WWW__USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.airflowAdmin.passwordSecretName }}
                  key: {{ .Values.airflowAdmin.passwordSecretKey }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: airflow-data
              mountPath: /opt/airflow/data
              
      volumes:
        - name: airflow-data
          persistentVolumeClaim:
            claimName: efs-shared-pvc