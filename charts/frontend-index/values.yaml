# --- values.yaml ---

replicas: 1

# El nombre de la aplicación, usado para labels y selectors
appName: frontend-index

# El nombre del PersistentVolumeClaim que creamos para EFS
pvcName: efs-shared-pvc

image:
  repository: ghcr.io/ml-for-academic-data/egi-frontend
  pullPolicy: IfNotPresent
  # El tag se puede seguir actualizando desde el pipeline de CI/CD
  tag: "default"

imagePullSecrets:
  - name: ghcr-credentials

# Configuración del servicio de red
service:
  # CAMBIO: Ahora es NodePort para que sea accesible desde fuera del clúster
  type: NodePort
  # Puerto que el servicio expone internamente en el clúster
  port: 3000
  # Puerto en el que la aplicación está escuchando dentro del contenedor
  containerPort: 3000

  # Configuración del Ingress para exponer el frontend-index
#ingress:
 # enabled: true
 # className: "nginx" # Si usas Nginx Ingress Controller
 # annotations:
    # Puedes añadir anotaciones específicas para tu Ingress Controller
    # Por ejemplo, para rewrite si tu app interna no espera el path completo
    # nginx.ingress.kubernetes.io/rewrite-target: /$2 # No siempre necesario si Flask redirige a URL completa
 # hosts:
  #  - host: ml_foracademicdata.com # **¡IMPORTANTE!** Reemplaza con tu dominio
   #   paths:
    #    - path: / # La ruta para tu frontend-index (la raíz del dominio)
     #     pathType: Prefix
      #    backend:
       #     service:
        #      name: frontend-index-service # Nombre del servicio de K8s para frontend-index
         #     port:
          #      number: 3000 # Puerto del servicio de tu frontend-index

# Variables de entorno para la aplicación Flask (app.py)
# Estas URLs serán usadas por tu app.py para las redirecciones.
#env:
 # - name: AIRFLOW_URL
  #  value: "http://ml_foracademicdata.com/airflow" # O el dominio/subdominio de Airflow
  #- name: PANEL_URL
   # value: "http://ml_foracademicdata.com/panel" # O el dominio/subdominio del Panel Dashboard